# -*- coding: utf-8 -*-

"""
/***************************************************************************
 KrystianAlgorytmy
                                 A QGIS plugin
 wtyczka algorytmowa 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-21
        copyright            : (C) 2024 by Tomasz Mazuga
        email                : tmazuga@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Tomasz Mazuga'
__date__ = '2024-08-21'
__copyright__ = '(C) 2024 by Tomasz Mazuga'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString,
                       QgsMessageLog,
                       QgsProcessingMultiStepFeedback)

from qgis import processing

import os
import inspect

class Asc2Xyz(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    FOLDER_PATH = 'FOLDER_PATH'
    OUTPUT_PATH = 'OUTPUT_PATH'
    NO_DATA = 'NO_DATA'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """


        self.addParameter(
            QgsProcessingParameterFile(
                name=self.FOLDER_PATH,
                description=self.tr('Wskaż folder z plikami <b>ASC</b>'),
                behavior=QgsProcessingParameterFile.Folder
            ))

        self.addParameter(
            QgsProcessingParameterFile(
                name=self.OUTPUT_PATH,
                description=self.tr('Wskaż folder wynikowy dla plików <b>XYZ</b> (gdy nie wybrany - będzie to ten sam '
                                    'co '
                                    'wejściowy'),
                behavior=QgsProcessingParameterFile.Folder,
                optional=True
            ))


        self.addParameter(
            QgsProcessingParameterString(
                name=self.NO_DATA,
                description=self.tr('Podaj wartość <b>NO DATA</b> [domyślnie -9999]'),
                defaultValue='-9999',
                optional=False
                ))


    def processAlgorithm(self, parameters, context, model_feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        folder_path = self.parameterAsFile(
            parameters,
            self.FOLDER_PATH,
            context)

        output_path = self.parameterAsFile(
            parameters,
            self.OUTPUT_PATH,
            context)

        no_data = self.parameterAsString(
            parameters,
            self.NO_DATA,
            context)


        def _konwersja_asc_xyz(plik_asc: str,path_out: str)-> bool:
            file_name = os.path.splitext(os.path.basename(plik_asc))[0]
            # QgsMessageLog.logMessage(f'{plik_asc}')
            out_file = os.path.join(plik_asc.replace(plik_asc, path_out), file_name + '.xyz')
            # QgsMessageLog.logMessage(f'{out_file}')
            alg_params = {
                'BAND': 1,
                'CSV': False,
                'INPUT': plik_asc,
                'NODATA_INPUT': int(no_data),
                'NODATA_OUTPUT': None,
                'SKIP_NODATA': True,
                'OUTPUT': out_file
            }
            try:
                processing.run('gdal:gdal2xyz', alg_params, context=context, feedback=feedback,is_child_algorithm=True)
                QgsMessageLog.logMessage(f'OK: {file_name}')
                return True
            except:
                QgsMessageLog.logMessage(f'BŁĄD: {file_name}')
                return False

            polygonize_out = polygonize['OUTPUT']
        # przejecie folderu wejscia gdy nie ma wyjscia
        if output_path is None or output_path == '':
            output_path = folder_path

        lista_plikow_do_konwersji = []
        for path, subdirs, files in os.walk(folder_path):
            for name in files:
                if name.lower().endswith('.asc'):
                    plik_full = (os.path.join(path, name)).replace("\\", "/")
                    lista_plikow_do_konwersji.append(plik_full)

        ile_plikow = len(lista_plikow_do_konwersji)
        QgsMessageLog.logMessage(f'Do sprawdzenia {ile_plikow}')
        QgsMessageLog.logMessage(f'Folder wejściowy: {folder_path}')
        QgsMessageLog.logMessage(f'Folder wyjściowy: {output_path}')
        # Compute the number of steps to display within the progress bar and
        # get features from source

        feedback = QgsProcessingMultiStepFeedback(ile_plikow, model_feedback)

        for current, file in enumerate(lista_plikow_do_konwersji):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            feedback.setCurrentStep(current)
            _konwersja_asc_xyz(file, output_path)

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        # return {self.OUTPUT: dest_id}

        QgsMessageLog.logMessage(f'GOTOWE')
        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Konwersja ASC na XYZ'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(cmd_folder, 'asc_2_xyz.png'))
        return icon

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'ASC'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Asc2Xyz()

    def shortDescription(self):
        """Returns an optional translated short description of the algorithm. This should be at most
        a single sentence, e.g. “Converts 2D features to 3D by sampling a DEM raster.”"""
        return self.tr("Algorytm konwertuje pliki ASC na pliki XYZ i usuwa wiersze z wartością NO VALUE")

    def shortHelpString(self):
        """ Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it.."""
        return self.tr("""<h1><b>        
        <h1><b>  Algorytm konwertuje pliki ASC na pliki XYZ i usuwa wiersze z wartością NO VALUE
        <b>Konwersja nie uwzględnia podkatalogów wskazanego folderu

        <b>Parametry:
        Folder z plikami <b>ASC</b>
        Folder zapisu <b>XYZ/b> (w przypadku braku, zapisuje w folderze z plikami ASC)
        Wartość <b>NO DATA</b> (domyślnie -9999, powinna być wprowadzona w tej postaci)
 """)
